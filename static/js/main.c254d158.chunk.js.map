{"version":3,"sources":["components/Result/Result.module.css","containers/Results/Results.module.css","containers/Layout/Layout.module.css","components/SearchBar/SearchBar.module.css","assets/icons/SVG/magnifying-glass.svg","components/LoadingWheel/LoadingWheel.module.css","components/SearchBar/SearchBar.js","components/TemperatureToggle/TemperatureToggle.js","components/Result/Result.js","hooks/http.js","components/LoadingWheel/LoadingWheel.js","containers/Results/Results.js","store/actions.js","components/Icon/Icon.js","containers/Layout/Layout.js","App.js","serviceWorker.js","store/reducer.js","index.js","components/TemperatureToggle/TemperatureToggle.module.css"],"names":["module","exports","React","memo","props","onSubmit","updateLocation","className","classes","SearchBar","type","placeholder","onChange","inputChange","src","SearchLogo","alt","Switch","id","SwitchInput","onClick","temperatureToggle","htmlFor","SwitchLabel","Temp","F","C","Result","backgroundImage","useState","showImages","setShowImages","description","console","log","country","onLoaded","onTimeout","timeout","style","opacity","key","index","Heading","countryCode","fontSize","lineHeight","svg","Location","City","location","Temperature","temperature","icon","Description","Details","Detail","Numbers","visibility","wind","sunRise","humidity","cloudiness","sunSet","httpReducer","curHttpState","action","loading","error","weatherData","responseData","list","weather","Error","useHttp","useReducer","httpState","dispatchHttp","sendRequest","useCallback","url","axios","get","then","response","data","errorMessage","isLoading","LoadingWheel","connect","state","temp","loc","dispatch","onTemperatureToggle","onLocationUpdate","input","locationName","setLoading","convertedWeather","setConvertedWeather","setError","convertedTemperature","setConvertedTemperature","firstLoad","setFirstLoad","useEffect","fetchLocation","filteredLocations","filteredLocationsIDs","forEach","push","filteredLocationsIDsConcat","join","filteredLocation","cities","filter","city","name","length","filterLocation","loadResults","weatherArray","setTimeout","i","sunrise","clouds","sunset","flag","count","newWeather","sys","main","convertVisibility","speed","convertWindSpeed","convertTime","timezone","convertPercentage","all","convertIcon","convertFlag","temperatureUpdated","map","locationWeather","temperatureUpdate","toString","convertToCelsius","convertToFarenheit","convertWeather","windSpeed","time","date","Date","getHours","getMinutes","substr","value","parse","parseFloat","toFixed","resultList","useMemo","Fragment","delay","duration","in","Name","Results","iconSet","require","Icon","searchBarInput","setSearchBarInput","Layout","Header","href","event","preventDefault","replace","txt","charAt","toUpperCase","toLowerCase","target","TemperatureToggle","App","Boolean","window","hostname","match","initialState","reducer","store","createStore","composeWithDevTools","defaults","baseURL","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c254d158.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__kx_y2\",\"Heading\":\"Result_Heading__1LAbu\",\"Location\":\"Result_Location__2mVee\",\"Temperature\":\"Result_Temperature__F6hBz\",\"Description\":\"Result_Description__2kWx3\",\"Details\":\"Result_Details__1m9fB\",\"Detail\":\"Result_Detail__3RUIp\",\"Numbers\":\"Result_Numbers__EUMxC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Results\":\"Results_Results__2iKBZ\",\"Location\":\"Results_Location__1QKn-\",\"Name\":\"Results_Name__qlQ1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__37MHr\",\"Header\":\"Layout_Header__1BPiT\",\"Icon\":\"Layout_Icon__tsOsy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__2Pbl1\"};","module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.f9737d3e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingWheel\":\"LoadingWheel_LoadingWheel__1c6eQ\"};","import React from 'react'\n\nimport classes from './SearchBar.module.css'\nimport SearchLogo from '../../assets/icons/SVG/magnifying-glass.svg'\n\nconst searchBar = (props) => (\n  <form onSubmit={props.updateLocation} className={classes.SearchBar}>\n    <input type =\"text\" placeholder=\"Enter a city name...\" onChange={props.inputChange}/>\n    <button type=\"submit\">\n      <img src={SearchLogo} alt=\"Search Logo\" />\n    </button>\n  </form>\n)\n\nexport default React.memo(searchBar)","import React from 'react'\n\nimport classes from './TemperatureToggle.module.css'\n\nconst temperatureToggle = props => (\n    <div className={classes.Switch}>\n      <input id=\"switch\" className={classes.SwitchInput} type=\"checkbox\" onClick={props.temperatureToggle}/>\n      <label htmlFor=\"switch\" className={classes.SwitchLabel}>\n        <div className={classes.Temp}>\n          <div className={classes.F}>C</div>\n          <div className={classes.C}>F</div>\n        </div>\n      </label>\n    </div>\n)\n\nexport default React.memo(temperatureToggle)","import React, { useState } from 'react';\n\nimport classes from './Result.module.css';\nimport OnImagesLoaded from 'react-on-images-loaded';\nimport ReactCountryFlag from 'react-country-flag';\n\nconst Result = (props) => {\n  const [showImages, setShowImages] = useState(false);\n  let backgroundImage;\n\n  if (\n    props.description === 'broken clouds' ||\n    props.description === 'overcast clouds' ||\n    props.description === 'haze'\n  ) {\n    backgroundImage = {\n      backgroundImage: 'linear-gradient(to top,white,var(--divider-color)',\n    };\n  }\n\n  console.log(props.country);\n\n  return (\n    <OnImagesLoaded\n      onLoaded={() => setShowImages(true)}\n      onTimeout={() => setShowImages(true)}\n      timeout={7000}\n    >\n      <div style={{ opacity: showImages ? 1 : 0 }}>\n        <div\n          className={classes.Result}\n          style={backgroundImage}\n          key={props.index}\n        >\n          <div className={classes.Heading}>\n            {/* <img src={props.flag} alt=\"flag\" /> */}\n            <ReactCountryFlag\n              countryCode={props.country}\n              className=\"emojiFlag\"\n              style={{\n                fontSize: '4rem',\n                lineHeight: '2rem',\n              }}\n              svg\n            />\n            <div className={classes.Location}>\n              <div className={classes.City}>\n                {props.location}, {props.country}\n              </div>\n              <div className={classes.Temperature}>{props.temperature}</div>\n            </div>\n            <img src={props.icon} alt=\"icon\" />\n          </div>\n          <div className={classes.Description}>{props.description}</div>\n          <div className={classes.Details}>\n            <div>\n              <div className={classes.Detail}>Visibility</div>\n              <div className={classes.Numbers}>{props.visibility}</div>\n            </div>\n            <div>\n              <div className={classes.Detail}>Wind</div>\n              <div className={classes.Numbers}>{props.wind}</div>\n            </div>\n\n            <div>\n              <div className={classes.Detail}> Sunrise </div>\n              <div className={classes.Numbers}>{props.sunRise}</div>\n            </div>\n\n            <div>\n              <div className={classes.Detail}>Humidity </div>\n              <div className={classes.Numbers}>{props.humidity}</div>\n            </div>\n\n            <div>\n              <div className={classes.Detail}>Cloudiness </div>\n              <div className={classes.Numbers}>{props.cloudiness}</div>\n            </div>\n\n            <div>\n              <div className={classes.Detail}>Sunset </div>\n              <div className={classes.Numbers}>{props.sunSet}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </OnImagesLoaded>\n  );\n};\n\nexport default Result;\n","import { useReducer, useCallback } from 'react';\n\nimport axios from 'axios';\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return { ...curHttpState, loading: true, error: null };\n    case 'RESPONSE':\n      return {\n        ...curHttpState,\n        loading: false,\n        weatherData: action.responseData.list,\n      };\n    case 'ERROR':\n      return { loading: false, error: action.weather };\n    default:\n      throw new Error('Error');\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    loading: false,\n    error: null,\n    weatherData: null,\n  });\n\n  const sendRequest = useCallback((url) => {\n    try {\n      dispatchHttp({ type: 'SEND' });\n      axios.get(url).then((response) => {\n        dispatchHttp({ type: 'RESPONSE', responseData: response.data });\n      });\n    } catch (error) {\n      dispatchHttp({ type: 'ERROR', errorMessage: error });\n    }\n  }, []);\n\n  return {\n    isLoading: httpState.loading,\n    weatherData: httpState.weatherData,\n    error: httpState.error,\n    sendRequest: sendRequest,\n  };\n};\n\nexport default useHttp;\n","import React from 'react';\nimport classes from './LoadingWheel.module.css';\n\nconst LoadingWheel = () => {\n  return <div className={classes.LoadingWheel}></div>;\n};\n\nexport default LoadingWheel;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport Result from '../../components/Result/Result';\nimport useHttp from '../../hooks/http';\n\nimport cities from '../../JSON/current.city.list.min.json';\nimport * as actionTypes from '../../store/actions';\nimport { Fade, Stagger } from 'react-animation-components';\n\nimport classes from './Results.module.css';\nimport LoadingWheel from '../../components/LoadingWheel/LoadingWheel';\n\nconst Results = (props) => {\n  const { sendRequest, weatherData, isLoading } = useHttp();\n  const [loading, setLoading] = useState(false);\n  const [convertedWeather, setConvertedWeather] = useState();\n  const [error, setError] = useState(false);\n  const [convertedTemperature, setConvertedTemperature] = useState();\n  const [firstLoad, setFirstLoad] = useState(true);\n  const { temp, loc } = props;\n\n  useEffect(() => {\n    setLoading(true);\n    function filterLocation() {\n      const filteredLocation = cities.filter((city) => city.name === loc);\n      if (filteredLocation.length !== 0) {\n        setError(false);\n        fetchLocation(filteredLocation);\n      } else {\n        setError(true);\n      }\n    }\n    const fetchLocation = (filteredLocations) => {\n      const filteredLocationsIDs = [];\n      filteredLocations.forEach((location) => {\n        filteredLocationsIDs.push(location.id);\n      });\n      const filteredLocationsIDsConcat = filteredLocationsIDs.join();\n      sendRequest(\n        `group?id=${filteredLocationsIDsConcat}&units=metric&appid=98df791eae9d9eb123a6ffbaf2aff6c6`\n      );\n    };\n    if (loc) {\n      filterLocation();\n    }\n  }, [loc, sendRequest]);\n\n  const loadResults = useCallback(\n    (weatherArray) => {\n      if (firstLoad) {\n        setConvertedWeather(weatherArray);\n        setFirstLoad(false);\n      } else {\n        setTimeout(() => {\n          setConvertedWeather(weatherArray);\n          setLoading(false);\n        }, 500);\n      }\n    },\n    [firstLoad]\n  );\n\n  useEffect(() => {\n    (function convertWeather() {\n      if (weatherData) {\n        const weather = () => {\n          return {\n            visibility: null,\n            wind: null,\n            sunrise: null,\n            humidity: null,\n            clouds: null,\n            sunset: null,\n            temp: null,\n            icon: null,\n            flag: null,\n            country: null,\n            name: null,\n            description: null,\n          };\n        };\n\n        const weatherArray = [];\n\n        for (let i = 0; i < weatherData.length; i++) {\n          weatherArray.push(weather());\n        }\n\n        let count = 0;\n        weatherData.forEach((newWeather) => {\n          weatherArray[count].country = newWeather.sys.country;\n          weatherArray[count].name = newWeather.name;\n          weatherArray[count].description = newWeather.weather[0].description;\n          weatherArray[count].temp = newWeather.main.temp;\n          weatherArray[count].visibility = convertVisibility(\n            newWeather.visibility\n          );\n          weatherArray[count].speed = convertWindSpeed(newWeather.wind.speed);\n          weatherArray[count].sunrise = convertTime(\n            newWeather.sys.sunrise,\n            newWeather.sys.timezone\n          );\n          weatherArray[count].humidity = convertPercentage(\n            newWeather.main.humidity\n          );\n          weatherArray[count].clouds = convertPercentage(newWeather.clouds.all);\n          weatherArray[count].sunset = convertTime(\n            newWeather.sys.sunset,\n            newWeather.sys.timezone\n          );\n          weatherArray[count].icon = convertIcon(newWeather.weather[0].icon);\n          weatherArray[count].flag = convertFlag(newWeather.sys.country);\n          weatherArray[count].wind = convertWindSpeed(newWeather.wind.speed);\n          ++count;\n        });\n\n        loadResults(weatherArray);\n      }\n    })();\n  }, [weatherData, loadResults]);\n\n  useEffect(() => {\n    const convertWeather = () => {\n      const temperatureUpdated = convertedWeather.map((locationWeather) => {\n        const temperatureUpdate = { ...locationWeather };\n        if (temp === true) {\n          temperatureUpdate.temp.toString().length <= 5\n            ? (temperatureUpdate.temp = temperatureUpdate.temp + '°C')\n            : (temperatureUpdate.temp = convertToCelsius(\n                temperatureUpdate.temp\n              ));\n        } else {\n          temperatureUpdate.temp = convertToFarenheit(temperatureUpdate.temp);\n        }\n        return temperatureUpdate;\n      });\n      setConvertedTemperature(temperatureUpdated);\n    };\n\n    convertedWeather && convertWeather();\n  }, [convertedWeather, temp]);\n\n  const convertVisibility = (visibility) => visibility / 1000 + 'km';\n  const convertWindSpeed = (windSpeed) => windSpeed + 'km/h';\n  const convertTime = (time, timezone) => {\n    time = time + timezone;\n    const date = new Date(time * 1000);\n    const hours = date.getHours() - 1;\n    const minutes = '0' + date.getMinutes();\n    return hours + ':' + minutes.substr(-2);\n  };\n  const convertPercentage = (humidity) => humidity + '%';\n  const convertIcon = (icon) =>\n    'http://openweathermap.org/img/wn/' + icon + '@2x.png';\n  const convertFlag = (country) =>\n    'https://www.countryflags.io/' + country + '/flat/64.png';\n  const convertToFarenheit = (value) => {\n    const parse = parseFloat(value);\n    return parseFloat((parse * 9) / 5 + 32).toFixed(2) + '°F';\n  };\n  const convertToCelsius = (value) => {\n    const parse = parseFloat(value);\n    return parseFloat(((parse - 32) * 5) / 9).toFixed(2) + '°C';\n  };\n\n  const resultList = useMemo(() => {\n    if (error) {\n      return (\n        <React.Fragment>\n          <p className={classes.Location}>\n            {' '}\n            Unable to find searched location!{' '}\n          </p>\n        </React.Fragment>\n      );\n    } else if (!convertedTemperature) {\n      return <div className={classes.Location}></div>;\n    } else {\n      return (\n        <React.Fragment>\n          {loading ? <LoadingWheel /> : null}\n          <Stagger delay={100} duration={500} in={!isLoading}>\n            <Fade>\n              <div className={classes.Location}>\n                Found {convertedTemperature.length}{' '}\n                {convertedTemperature.length === 1 ? 'location' : 'locations'}{' '}\n                named\n                <span className={classes.Name}>\n                  {' '}\n                  {convertedTemperature[0].name}\n                </span>\n              </div>\n            </Fade>\n            {convertedTemperature.map((city, index) => (\n              <Fade key={index}>\n                <Result\n                  isLoading={isLoading}\n                  temperature={city.temp}\n                  description={city.description}\n                  visibility={city.visibility}\n                  wind={city.wind}\n                  sunRise={city.sunrise}\n                  humidity={city.humidity}\n                  cloudiness={city.clouds}\n                  sunSet={city.sunset}\n                  icon={city.icon}\n                  flag={city.flag}\n                  key={index}\n                  country={city.country}\n                  location={city.name}\n                />\n              </Fade>\n            ))}\n          </Stagger>\n        </React.Fragment>\n      );\n    }\n  }, [isLoading, convertedTemperature, error, loading]);\n\n  return <main className={classes.Results}>{resultList}</main>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    temp: state.temperature,\n    loc: state.location,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTemperatureToggle: () =>\n      dispatch({ type: actionTypes.TEMPERATURE_TOGGLE }),\n    onLocationUpdate: (input) =>\n      dispatch({ type: actionTypes.UPDATE_LOCATION, locationName: input }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","export const TEMPERATURE_TOGGLE = 'TEMPERATURE_TOGGLE';\nexport const UPDATE_LOCATION = 'CHANGE_LOCATION';\n","import React from 'react';\nimport IcoMoon from 'react-icomoon';\nconst iconSet = require('../../JSON/selection.json');\n\nconst Icon = ({ ...props }) => {\n  return <IcoMoon iconSet={iconSet} {...props} />;\n};\n\nexport default Icon;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ExternalLink } from 'react-external-link';\n\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport TemperatureToggle from '../../components/TemperatureToggle/TemperatureToggle';\nimport Results from '../Results/Results';\n\nimport * as actionTypes from '../../store/actions';\n\nimport classes from './Layout.module.css';\n\nimport Icon from '../../components/Icon/Icon';\n\nconst Layout = (props) => {\n  const [searchBarInput, setSearchBarInput] = useState('');\n\n  const handleInput = (input) => {\n    setSearchBarInput(input.target.value);\n  };\n\n  const capitalizeWords = (str) => {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const location = capitalizeWords(searchBarInput);\n\n    props.onLocationUpdate(location);\n  };\n\n  return (\n    <div className={classes.Layout}>\n      <header className={classes.Header}>\n        <h1>Weather City App</h1>\n\n        <ExternalLink href=\"https://github.com/cam71101/weather-app\">\n          <Icon className={classes.Icon} icon=\"github\" />\n        </ExternalLink>\n\n        <SearchBar updateLocation={handleSubmit} inputChange={handleInput} />\n        <TemperatureToggle temperatureToggle={props.onTemperatureToggle} />\n      </header>\n      <Results />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    temp: state.temperature,\n    loc: state.location,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTemperatureToggle: () =>\n      dispatch({ type: actionTypes.TEMPERATURE_TOGGLE }),\n\n    onLocationUpdate: (input) =>\n      dispatch({ type: actionTypes.UPDATE_LOCATION, locationName: input }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","import React from 'react';\nimport Layout from './containers/Layout/Layout';\n\nconst App = (props) => {\n  return (\n    <div>\n      <Layout />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions';\n\nconst initialState = {\n  location: null,\n  temperature: true,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TEMPERATURE_TOGGLE:\n      return {\n        ...state,\n        temperature: !state.temperature,\n      };\n    case actionTypes.UPDATE_LOCATION:\n      return {\n        ...state,\n        location: action.locationName,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\nimport reducer from './store/reducer'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(reducer, composeWithDevTools()); \n\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5/'\n\naxios.interceptors.request.use(request => {\n  return request\n}, error => {\n  console.log(error)\n  return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n  return response\n}, error => {\n  console.log(error)\n  return Promise.reject(error)\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Switch\":\"TemperatureToggle_Switch__24RNG\",\"SwitchInput\":\"TemperatureToggle_SwitchInput__2S0uE\",\"SwitchLabel\":\"TemperatureToggle_SwitchLabel__1yVTB\",\"Temp\":\"TemperatureToggle_Temp__3Ujoz\",\"F\":\"TemperatureToggle_F__DQYrm\",\"C\":\"TemperatureToggle_C__32D1f\"};"],"sourceRoot":""}