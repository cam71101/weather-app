{"version":3,"sources":["components/Results/Result/Result.module.css","components/Results/Results.module.css","containers/Layout/Layout.module.css","components/SearchBar/SearchBar.module.css","assets/icons/SVG/magnifying-glass.svg","components/SearchBar/SearchBar.js","components/TemperatureToggle/TemperatureToggle.js","components/Results/Result/Result.js","hooks/http.js","components/Results/Results.js","store/actions.js","components/Icon/Icon.js","containers/Layout/Layout.js","App.js","serviceWorker.js","store/reducer.js","index.js","components/TemperatureToggle/TemperatureToggle.module.css"],"names":["module","exports","React","memo","props","onSubmit","updateLocation","className","classes","SearchBar","type","placeholder","onChange","inputChange","src","SearchLogo","alt","Switch","id","SwitchInput","onClick","temperatureToggle","htmlFor","SwitchLabel","Temp","F","C","Result","backgroundImage","useState","showImages","setShowImages","description","onLoaded","onTimeout","timeout","style","key","index","opacity","Heading","flag","Location","City","location","country","Temperature","temperature","icon","Description","Details","Detail","Numbers","visibility","wind","sunRise","humidity","cloudiness","sunSet","httpReducer","curHttpState","action","loading","error","weatherData","responseData","list","weather","Error","useHttp","useReducer","httpState","dispatchHttp","sendRequest","useCallback","url","axios","get","then","response","data","errorMessage","isLoading","connect","state","temp","loc","dispatch","onTemperatureToggle","onLocationUpdate","input","locationName","convertedWeather","setConvertedWeather","setError","convertedTemperature","setConvertedTemperature","firstLoad","setFirstLoad","useEffect","fetchLocation","filteredLocations","filteredLocationsIDs","forEach","push","filteredLocationsIDsConcat","join","filteredLocation","cities","filter","city","name","length","filterLocation","loadResults","weatherArray","setTimeout","i","sunrise","clouds","sunset","count","newWeather","sys","main","convertVisibility","speed","convertWindSpeed","convertTime","timezone","convertPercentage","all","convertIcon","convertFlag","temperatureUpdated","map","locationWeather","temperatureUpdate","toString","convertToCelsius","convertToFarenheit","convertWeather","windSpeed","time","date","Date","getHours","getMinutes","substr","value","parse","parseFloat","toFixed","resultList","useMemo","Fragment","delay","duration","in","Name","Results","iconSet","require","Icon","searchBarInput","setSearchBarInput","Header","href","event","preventDefault","replace","txt","charAt","toUpperCase","toLowerCase","target","TemperatureToggle","App","Boolean","window","hostname","match","initialState","reducer","store","createStore","composeWithDevTools","defaults","baseURL","interceptors","request","use","console","log","Promise","reject","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d9ab47ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__1vb_6\",\"Heading\":\"Result_Heading__3bc4k\",\"Location\":\"Result_Location__6JoaD\",\"Temperature\":\"Result_Temperature__3DEYj\",\"Description\":\"Result_Description__35s6E\",\"Details\":\"Result_Details__3hyQl\",\"Detail\":\"Result_Detail__MFHak\",\"Numbers\":\"Result_Numbers__nmjqb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Results\":\"Results_Results__jHOtM\",\"Location\":\"Results_Location__2XVNy\",\"Name\":\"Results_Name__1bYRn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Layout_Header__1BPiT\",\"Icon\":\"Layout_Icon__tsOsy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__2Pbl1\"};","module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.f9737d3e.svg\";","import React from 'react'\n\nimport classes from './SearchBar.module.css'\nimport SearchLogo from '../../assets/icons/SVG/magnifying-glass.svg'\n\nconst searchBar = (props) => (\n  <form onSubmit={props.updateLocation} className={classes.SearchBar}>\n    <input type =\"text\" placeholder=\"Enter a city name...\" onChange={props.inputChange}/>\n    <button type=\"submit\">\n      <img src={SearchLogo} alt=\"Search Logo\" />\n    </button>\n  </form>\n)\n\nexport default React.memo(searchBar)","import React from 'react'\n\nimport classes from './TemperatureToggle.module.css'\n\nconst temperatureToggle = props => (\n    <div className={classes.Switch}>\n      <input id=\"switch\" className={classes.SwitchInput} type=\"checkbox\" onClick={props.temperatureToggle}/>\n      <label htmlFor=\"switch\" className={classes.SwitchLabel}>\n        <div className={classes.Temp}>\n          <div className={classes.F}>C</div>\n          <div className={classes.C}>F</div>\n        </div>\n      </label>\n    </div>\n)\n\nexport default React.memo(temperatureToggle)","import React, { useState } from 'react';\n\nimport classes from './Result.module.css';\nimport OnImagesLoaded from 'react-on-images-loaded';\n\nconst Result = (props) => {\n  const [showImages, setShowImages] = useState(false);\n  let backgroundImage;\n\n  if (\n    props.description === 'broken clouds' ||\n    props.description === 'overcast clouds' ||\n    props.description === 'haze'\n  ) {\n    backgroundImage = {\n      backgroundImage: 'linear-gradient(to top,white,var(--divider-color)',\n    };\n  }\n\n  return (\n    <OnImagesLoaded\n      onLoaded={() => setShowImages(true)}\n      onTimeout={() => setShowImages(true)}\n      timeout={7000}\n    >\n      <div\n        className={classes.Result}\n        style={backgroundImage}\n        key={props.index}\n        style={{ opacity: showImages ? 1 : 0 }}\n      >\n        <div className={classes.Heading}>\n          <img src={props.flag} alt=\"flag\" />\n          <div className={classes.Location}>\n            <div className={classes.City}>\n              {props.location}, {props.country}\n            </div>\n            <div className={classes.Temperature}>{props.temperature}</div>\n          </div>\n          <img src={props.icon} alt=\"icon\" />\n        </div>\n        <div className={classes.Description}>{props.description}</div>\n        <div className={classes.Details}>\n          <div>\n            <div className={classes.Detail}>Visibility</div>\n            <div className={classes.Numbers}>{props.visibility}</div>\n          </div>\n          <div>\n            <div className={classes.Detail}>Wind</div>\n            <div className={classes.Numbers}>{props.wind}</div>\n          </div>\n\n          <div>\n            <div className={classes.Detail}> Sunrise </div>\n            <div className={classes.Numbers}>{props.sunRise}</div>\n          </div>\n\n          <div>\n            <div className={classes.Detail}>Humidity </div>\n            <div className={classes.Numbers}>{props.humidity}</div>\n          </div>\n\n          <div>\n            <div className={classes.Detail}>Cloudiness </div>\n            <div className={classes.Numbers}>{props.cloudiness}</div>\n          </div>\n\n          <div>\n            <div className={classes.Detail}>Sunset </div>\n            <div className={classes.Numbers}>{props.sunSet}</div>\n          </div>\n        </div>\n      </div>\n    </OnImagesLoaded>\n  );\n};\n\nexport default Result;\n","import { useReducer, useCallback } from 'react'\n\nimport axios from 'axios'\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return {...curHttpState, loading: true, error: null}\n    case 'RESPONSE':\n      return {...curHttpState, loading: false, weatherData: action.responseData.list}\n    case 'ERROR':\n      return { loading: false, error: action.weather}\n    default:\n      throw new Error('Error')\n  }\n}\n\nconst useHttp = () => {\n\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    loading: false,\n    error: null,\n    weatherData: null\n  })\n\n  const sendRequest = useCallback((url) => {\n    try {\n      dispatchHttp({ type: 'SEND' })\n      axios.get(url)\n        .then((response) => {\n            dispatchHttp({ type: 'RESPONSE', responseData: response.data })\n        })\n    } catch(error) {\n      dispatchHttp({ type:'ERROR', errorMessage: error})\n    }\n  }, [])\n\n\n  return {\n    isLoading: httpState.loading,\n    weatherData: httpState.weatherData,\n    error: httpState.error,\n    sendRequest: sendRequest\n  }\n\n}\n\nexport default useHttp","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport Result from './Result/Result';\nimport useHttp from '../../hooks/http';\n\nimport cities from '../../JSON/current.city.list.min.json';\nimport * as actionTypes from '../../store/actions';\nimport { Fade, Stagger } from 'react-animation-components';\n\nimport classes from './Results.module.css';\n\nconst Results = (props) => {\n  const { sendRequest, weatherData, isLoading } = useHttp();\n  const [convertedWeather, setConvertedWeather] = useState();\n  const [error, setError] = useState(false);\n  const [convertedTemperature, setConvertedTemperature] = useState();\n  const [firstLoad, setFirstLoad] = useState(true);\n  const { temp, loc } = props;\n\n  useEffect(() => {\n    function filterLocation() {\n      const filteredLocation = cities.filter((city) => city.name === loc);\n      if (filteredLocation.length !== 0) {\n        setError(false);\n        fetchLocation(filteredLocation);\n      } else {\n        setError(true);\n      }\n    }\n    const fetchLocation = (filteredLocations) => {\n      const filteredLocationsIDs = [];\n      filteredLocations.forEach((location) => {\n        filteredLocationsIDs.push(location.id);\n      });\n      const filteredLocationsIDsConcat = filteredLocationsIDs.join();\n      sendRequest(\n        `group?id=${filteredLocationsIDsConcat}&units=metric&appid=98df791eae9d9eb123a6ffbaf2aff6c6`\n      );\n    };\n    if (loc) {\n      filterLocation();\n    }\n  }, [loc, sendRequest]);\n\n  const loadResults = useCallback(\n    (weatherArray) => {\n      if (firstLoad) {\n        setConvertedWeather(weatherArray);\n        setFirstLoad(false);\n      } else {\n        setTimeout(() => {\n          setConvertedWeather(weatherArray);\n        }, 500);\n      }\n    },\n    [firstLoad]\n  );\n\n  useEffect(() => {\n    (function convertWeather() {\n      if (weatherData) {\n        const weather = () => {\n          return {\n            visibility: null,\n            wind: null,\n            sunrise: null,\n            humidity: null,\n            clouds: null,\n            sunset: null,\n            temp: null,\n            icon: null,\n            flag: null,\n            country: null,\n            name: null,\n            description: null,\n          };\n        };\n\n        const weatherArray = [];\n\n        for (let i = 0; i < weatherData.length; i++) {\n          weatherArray.push(weather());\n        }\n\n        let count = 0;\n        weatherData.forEach((newWeather) => {\n          weatherArray[count].country = newWeather.sys.country;\n          weatherArray[count].name = newWeather.name;\n          weatherArray[count].description = newWeather.weather[0].description;\n          weatherArray[count].temp = newWeather.main.temp;\n          weatherArray[count].visibility = convertVisibility(\n            newWeather.visibility\n          );\n          weatherArray[count].speed = convertWindSpeed(newWeather.wind.speed);\n          weatherArray[count].sunrise = convertTime(\n            newWeather.sys.sunrise,\n            newWeather.sys.timezone\n          );\n          weatherArray[count].humidity = convertPercentage(\n            newWeather.main.humidity\n          );\n          weatherArray[count].clouds = convertPercentage(newWeather.clouds.all);\n          weatherArray[count].sunset = convertTime(\n            newWeather.sys.sunset,\n            newWeather.sys.timezone\n          );\n          weatherArray[count].icon = convertIcon(newWeather.weather[0].icon);\n          weatherArray[count].flag = convertFlag(newWeather.sys.country);\n          weatherArray[count].wind = convertWindSpeed(newWeather.wind.speed);\n          ++count;\n        });\n\n        loadResults(weatherArray);\n      }\n    })();\n  }, [weatherData, loadResults]);\n\n  useEffect(() => {\n    const convertWeather = () => {\n      const temperatureUpdated = convertedWeather.map((locationWeather) => {\n        const temperatureUpdate = { ...locationWeather };\n        if (temp === true) {\n          temperatureUpdate.temp.toString().length <= 5\n            ? (temperatureUpdate.temp = temperatureUpdate.temp + '°C')\n            : (temperatureUpdate.temp = convertToCelsius(\n                temperatureUpdate.temp\n              ));\n        } else {\n          temperatureUpdate.temp = convertToFarenheit(temperatureUpdate.temp);\n        }\n        return temperatureUpdate;\n      });\n      setConvertedTemperature(temperatureUpdated);\n    };\n\n    convertedWeather && convertWeather();\n  }, [convertedWeather, temp]);\n\n  const convertVisibility = (visibility) => visibility / 1000 + 'km';\n  const convertWindSpeed = (windSpeed) => windSpeed + 'km/h';\n  const convertTime = (time, timezone) => {\n    time = time + timezone;\n    const date = new Date(time * 1000);\n    const hours = date.getHours() - 1;\n    const minutes = '0' + date.getMinutes();\n    return hours + ':' + minutes.substr(-2);\n  };\n  const convertPercentage = (humidity) => humidity + '%';\n  const convertIcon = (icon) =>\n    'http://openweathermap.org/img/wn/' + icon + '@2x.png';\n  const convertFlag = (country) =>\n    'https://www.countryflags.io/' + country + '/flat/64.png';\n  const convertToFarenheit = (value) => {\n    const parse = parseFloat(value);\n    return parseFloat((parse * 9) / 5 + 32).toFixed(2) + '°F';\n  };\n  const convertToCelsius = (value) => {\n    const parse = parseFloat(value);\n    return parseFloat(((parse - 32) * 5) / 9).toFixed(2) + '°C';\n  };\n\n  const resultList = useMemo(() => {\n    if (error) {\n      return (\n        <p className={classes.Location}> Unable to find searched location! </p>\n      );\n    } else if (!convertedTemperature) {\n      return null;\n    } else {\n      return (\n        <React.Fragment>\n          <Stagger delay={100} duration={500} in={!isLoading}>\n            <Fade>\n              <div className={classes.Location}>\n                Found {convertedTemperature.length}{' '}\n                {convertedTemperature.length === 1 ? 'location' : 'locations'}{' '}\n                named\n                <span className={classes.Name}>\n                  {' '}\n                  {convertedTemperature[0].name}\n                </span>\n              </div>\n            </Fade>\n            {convertedTemperature.map((city, index) => (\n              <Fade key={index}>\n                <Result\n                  isLoading={isLoading}\n                  temperature={city.temp}\n                  description={city.description}\n                  visibility={city.visibility}\n                  wind={city.wind}\n                  sunRise={city.sunrise}\n                  humidity={city.humidity}\n                  cloudiness={city.clouds}\n                  sunSet={city.sunset}\n                  icon={city.icon}\n                  flag={city.flag}\n                  key={index}\n                  country={city.country}\n                  location={city.name}\n                />\n              </Fade>\n            ))}\n          </Stagger>\n        </React.Fragment>\n      );\n    }\n  }, [isLoading, convertedTemperature, error]);\n\n  return <main className={classes.Results}>{resultList}</main>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    temp: state.temperature,\n    loc: state.location,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTemperatureToggle: () =>\n      dispatch({ type: actionTypes.TEMPERATURE_TOGGLE }),\n    onLocationUpdate: (input) =>\n      dispatch({ type: actionTypes.UPDATE_LOCATION, locationName: input }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","export const TEMPERATURE_TOGGLE = 'TEMPERATURE_TOGGLE'\nexport const UPDATE_LOCATION = 'CHANGE_LOCATION'\n","import React from \"react\";\nimport IcoMoon from \"react-icomoon\";\nconst iconSet = require(\"../../JSON/selection.json\");\n \nconst Icon = ({ ...props }) => {\n  return <IcoMoon iconSet={iconSet} {...props} />;\n};\n \nexport default Icon","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { ExternalLink } from 'react-external-link';\n\nimport SearchBar from '../../components/SearchBar/SearchBar'\nimport TemperatureToggle from '../../components/TemperatureToggle/TemperatureToggle'\nimport Results from '../../components/Results/Results'\n\nimport * as actionTypes from '../../store/actions'\n\nimport classes from './Layout.module.css'\n\nimport Icon from \"../../components/Icon/Icon\";\n\nconst Layout = props => {\n\n  const [searchBarInput, setSearchBarInput] = useState('')\n\n  const handleInput = (input) => {\n    setSearchBarInput(input.target.value)\n  }\n\n  const capitalizeWords = (str) => {\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const location = capitalizeWords(searchBarInput)\n    props.onLocationUpdate(location)\n  }\n\n    return (\n      <React.Fragment>\n        <header className={classes.Header}>\n          <h1 >Weather City App</h1>\n\n          <ExternalLink href=\"https://github.com/cam71101/weather-app\">\n            <Icon className={classes.Icon} icon=\"github\" />\n          </ExternalLink>\n\n          <SearchBar\n            updateLocation={handleSubmit}\n            inputChange={handleInput}\n          />\n          <TemperatureToggle\n            temperatureToggle={props.onTemperatureToggle}\n          />\n        </header>\n          <Results/>\n      </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n  return {\n    temp: state.temperature,\n    loc: state.location\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTemperatureToggle: () => dispatch({type: actionTypes.TEMPERATURE_TOGGLE}),\n    onLocationUpdate: (input) => dispatch({type: actionTypes.UPDATE_LOCATION, locationName: input })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout)","import React from 'react';\nimport Layout from './containers/Layout/Layout'\n\nconst App = props => {\n\n  return (\n    <div>\n      <Layout />\n    </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions'\n\nconst initialState = {\n  location: null,\n  temperature: true\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    \n    case actionTypes.TEMPERATURE_TOGGLE:\n      return {\n        ...state,\n        temperature: !state.temperature\n      }\n    case actionTypes.UPDATE_LOCATION:\n      return {\n        ...state,\n        location: action.locationName\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\nimport reducer from './store/reducer'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(reducer, composeWithDevTools()); \n\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5/'\n\naxios.interceptors.request.use(request => {\n  return request\n}, error => {\n  console.log(error)\n  return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n  return response\n}, error => {\n  console.log(error)\n  return Promise.reject(error)\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Switch\":\"TemperatureToggle_Switch__24RNG\",\"SwitchInput\":\"TemperatureToggle_SwitchInput__2S0uE\",\"SwitchLabel\":\"TemperatureToggle_SwitchLabel__1yVTB\",\"Temp\":\"TemperatureToggle_Temp__3Ujoz\",\"F\":\"TemperatureToggle_F__DQYrm\",\"C\":\"TemperatureToggle_C__32D1f\"};"],"sourceRoot":""}